@using TechDebtGame.Pages
<CascadingValue Value="GameCardListModel">
    <div>
        @ChildContent

        <ul class="dropzone @_dropClass"
            ondragover="event.preventDefault();"
            ondragstart="event.dataTransfer.setData('', event.target.id);"
            @ondrop="HandleDrop"
            @ondragenter="HandleDragEnter"
            @ondragleave="HandleDragLeave">

            @foreach (var card in GameCardListModel.Cards)
            {
                <li class="@_cardOverride">
                    <GameCard GameCardModel=card
                              ArrowDirection=GetArrowDirection(card) />
                </li>
            }

        </ul>
    </div>
</CascadingValue>

@code {

    [CascadingParameter]
    GameCardListContainer Container { get; set; }

    [CascadingParameter]
    public GameManager GameManager { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public GameCardListModel GameCardListModel { get; set; }

    public GameCard.Arrow GetArrowDirection(IGameCardModel card)
    {
        return (card is TechDebtGameCardModel && GameCardListModel is ProposedForIterationCardList)
               || (card is not TechDebtGameCardModel && GameCardListModel is not ProposedForIterationCardList)
            ? GameCard.Arrow.Left
            : GameCard.Arrow.Right;
    }

    string _dropClass = "";
    string _cardOverride = "";

    public void HandleDragEnter(DragEventArgs dragEventArgs)
    {
        if (GameManager.CanMoveCard(Container.Payload, GameCardListModel))
            _dropClass = "can-drop";
        else
        {
            _dropClass = "cannot-drop";
            _cardOverride = "hide";
        }
    }

    public void HandleDragLeave()
    {
        _dropClass = "";
        _cardOverride = "";
    }

    private async Task HandleDrop()
    {
        _dropClass = "";

        await Container.UpdateCardAsync(GameCardListModel);
    }
}