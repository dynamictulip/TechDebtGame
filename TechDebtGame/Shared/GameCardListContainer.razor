@using TechDebtGame.Pages
<div>
    <CascadingValue Value="this">
        <CascadingValue Value="GameManager">
            @ChildContent
        </CascadingValue>
    </CascadingValue>
</div>

@code {

    [Parameter]
    public GameManager GameManager { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<IGameCardModel> OnStatusUpdated { get; set; }

    public IGameCardModel Payload { get; set; }

    public async Task UpdateCardAsync(GameCardListModel gameCardList)
    {
        var cardModel = Payload;

        if (GameManager.MoveCard(cardModel, gameCardList))
            await OnStatusUpdated.InvokeAsync(Payload);
    }

    public async Task MoveCardAsync(IGameCardModel card, GameCardListModel currentList)
    {
        Payload = card;

        switch (currentList)
        {
            case OutstandingTechDebtCardList:
            case OutstandingFeaturesCardList:
                await UpdateCardAsync(GameManager.ProposedForIterationCardList);
                break;
            default:
            {
                if (card is TechDebtGameCardModel)
                {
                    await UpdateCardAsync(GameManager.OutstandingTechDebtCardList);
                }
                else
                {
                    await UpdateCardAsync(GameManager.OutstandingFeaturesCardList);
                }

                break;
            }
        }
    }

}