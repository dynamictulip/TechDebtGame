@page "/"

<h1>The Technical Debt Game</h1>

<h3>Gameplay Instructions</h3>
<p>
    Each team should have a Tech Debt Game Chart. The theoretical capacity is always 60 points.
    You will require the supporting document of iteration scenarios in order to run this simulated example.
</p>
<ol>
    <li>Add up the Impact of all currently outstanding Tech Debt cards. For the first iteration, this will always be 35 points. Record this on the chart under Technical Debt Impact as -35 points. Compute the actual capacity for the team for this iteration (which will be 25 points in the first iteration).</li>
    <li>Plot the Technical Debt Impact on the chart (35 points for the first iteration).</li>
    <li>Plan your iteration by selecting how many points to spend on Features and how many to spend eliminating Tech Debt (each Tech Debt card has a Cost, which is the number of points required to resolve it). The total points you can spend in any iteration must be equal to the Actual Capacity from step #1.</li>
    <li>Have the team select a random number between 1-10. Read the corresponding scenario from the scenarios document and then add the required changes to the Iteration table in the bottom left of this board.</li>
</ol>
<p>Repeat these steps for 5 Iterations, with the goal to maximize the Feature Story Points completed.</p>


<Container>
    <Row>
        <Column ColumnSize="ColumnSize.Is4">
            <div id="iterationCards">
                <Card Background="Background.Primary">
                    <CardBody>
                        <CardTitle>Next Iteration</CardTitle>
                    </CardBody>
                </Card>
            </div>
        </Column>
    </Row>

    <div id="technicalDebtCards"></div>
    <div id="featureCards_Cost15"></div>
    <div id="featureCards_Cost10"></div>
    <div id="featureCards_Cost5"></div>

    <Row>
        <Column ColumnSize="ColumnSize.Is6.WithOffset">
            <Table Narrow="true">
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>Iteration number</TableHeaderCell>
                        <TableHeaderCell>Team total capacity</TableHeaderCell>
                        <TableHeaderCell>Tech debt impact on capacity</TableHeaderCell>
                        <TableHeaderCell>Available capacity</TableHeaderCell>
                        <TableHeaderCell>Feature points complete</TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @foreach (var iteration in iterations)
                    {
                        <TableRow>
                            <TableRowHeader>@iteration.Number</TableRowHeader>
                            <TableRowCell>@iteration.TotalCapacity</TableRowCell>
                            <TableRowCell>-1,000,000</TableRowCell>
                            <TableRowCell>@iteration.AvailableCapacity</TableRowCell>
                            <TableRowCell>@iteration.FeaturePointsComplete</TableRowCell>
                        </TableRow>
                    }
                </TableBody>
            </Table>
        </Column>
    </Row>
</Container>

@code {

        private const int TeamTotalCapacity = 60;
    private List<Iteration> iterations;
    private List<IterationCard> iterationCards;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        InitialiseIterations();
        PrepareIterationCards();
    }

    private void InitialiseIterations()
    {
        iterations = new List<Iteration>();
        for (var i = 0; i < 5; i++)
        {
            iterations.Add(new Iteration {TotalCapacity = TeamTotalCapacity, Number = i + 1});
        }
    }

    private void PrepareIterationCards()
    {
        iterationCards = new List<IterationCard>
        {
            new IterationCard {Cost = 0, Impact = 0, Scenario = "The team implemented features cleanly, with good design and no direct tradeoffs. No new debt recorded!"},
            new IterationCard {Cost = 10, Impact = -5, Scenario = "Database is getting large and complex. We need to add automated migrations to reduce manual work and support refactoring."},
            new IterationCard {Cost = 15, Impact = -5, Scenario = "During testing new defects were found. This must be addressed as technical debt. If continuous integration is in place, you may disregard this card."},
            new IterationCard {Cost = 10, Impact = -5, Scenario = "The VP of sales pushes the team on urgent delivery. They chose simpler implementation and now need come back later to improve scalability."},
            new IterationCard {Cost = 5, Impact = -5, Scenario = "Issues were found in production and the team had to push out a quick patch. Code Debt was incurred."},
            new IterationCard {Cost = 0, Impact = 0, Scenario = "The Product Owner will not agree to more than 25% Capacity dedicated to Tech Debt for the next iteration."},
            new IterationCard {Cost = 15, Impact = -10, Scenario = "New Features must be added to a module, but it is tightly coupled to others, making implementation difficult."},
            new IterationCard {Cost = 5, Impact = -5, Scenario = "A significant portion of a core class is now obsolete, making new development more difficult."},
            new IterationCard {Cost = 10, Impact = -5, Scenario = "The Deployment process has become increasingly complex. If Deployment Automation has been completed, you may disregard this card."},
            new IterationCard {Cost = 5, Impact = -5, Scenario = "The application is using an older version of a 3rd party library and it should be updated."}
        };

        iterationCards.Shuffle();
    }

}