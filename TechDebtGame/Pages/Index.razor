@page "/"

<Container>
    <Heading Size="HeadingSize.Is1">The Technical Debt Game</Heading>

    <Heading Size="HeadingSize.Is3">Gameplay Instructions</Heading>
    <Paragraph>
        Each team should have a Tech Debt Game Chart. The theoretical capacity is always 60 points.
        You will require the supporting document of iteration scenarios in order to run this simulated example.
    </Paragraph>
    <Paragraph>Repeat these steps for 5 IterationModels, with the goal to maximize the Feature Story Points completed.</Paragraph>

    <Modal @ref="_endOfIterationModal">
        <ModalBackdrop/>
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle> End of IterationModel @_gameManager.LastIteration.Number</ModalTitle>
                <CloseButton Clicked="@HideModal"/>
            </ModalHeader>
            <ModalBody>
                <Container Fluid="true">
                    <Row>
                        @_gameManager.LastIteration.GameCardModel.Scenario
                    </Row>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is6.Is3.WithOffset">
                            @if (_gameManager.LastIteration.GameCardModel.Cost > 0)
                            {
                                <Card Margin="Margin.Is3">
                                    <CardHeader>New Tech Debt</CardHeader>
                                    <CardBody>
                                        <CardText>Cost = @_gameManager.LastIteration.GameCardModel.Cost</CardText>
                                        <CardText>Impact = @_gameManager.LastIteration.GameCardModel.Impact</CardText>
                                    </CardBody>
                                </Card>
                            }

                            else
                            {
                                <Card class="gameCard" Margin="Margin.Is3">
                                    <CardHeader>No new Tech Debt :-)</CardHeader>
                                </Card>
                            }
                        </Column>
                    </Row>
                </Container>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Primary" Clicked="@HideModal">Close</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Row>
        <Column ColumnSize="ColumnSize.Is2">
            <div id="iterationCards">
                <Button Color="Color.Primary" Clicked="@EndIteration" Block="true">
                    Next IterationModel
                </Button>
            </div>

        </Column>
        <Column ColumnSize="ColumnSize.Is10">
            <Table Narrow="true" Hoverable="true">
                <TableHeader>
                    <TableRow>
                        <TableHeaderCell>
                            <Text Alignment="TextAlignment.Center">IterationModel number</Text>
                        </TableHeaderCell>
                        <TableHeaderCell>
                            <Text Alignment="TextAlignment.Center">Team total capacity</Text>
                        </TableHeaderCell>
                        <TableHeaderCell>
                            <Text Alignment="TextAlignment.Center">Tech debt impact on capacity</Text>
                        </TableHeaderCell>
                        <TableHeaderCell>
                            <Text Alignment="TextAlignment.Center">Available capacity</Text>
                        </TableHeaderCell>
                        <TableHeaderCell>
                            <Text Alignment="TextAlignment.Center">Feature points complete</Text>
                        </TableHeaderCell>
                    </TableRow>
                </TableHeader>
                <TableBody>
                    @foreach (var iteration in _gameManager.Iterations)
                    {
                        @if (iteration == _gameManager.CurrentIteration)
                        {
                            <TableRow Background=Background.Danger TextColor=TextColor.White>
                                <TableRowHeader>
                                    <Text Alignment="TextAlignment.Center">Proposed @iteration.Number</Text>
                                </TableRowHeader>
                                <TableRowCell>
                                    <Text Alignment="TextAlignment.Center">@iteration.TotalCapacity</Text>
                                </TableRowCell>
                                <TableRowCell>
                                    <Text Alignment="TextAlignment.Center">@iteration.TechDebtImpactOnCapacity</Text>
                                </TableRowCell>
                                <TableRowCell>
                                    <Text Alignment="TextAlignment.Center">@iteration.AvailableCapacity</Text>
                                </TableRowCell>
                                <TableRowCell>
                                    <Text Alignment="TextAlignment.Center">@iteration.FeaturePointsComplete</Text>
                                </TableRowCell>
                            </TableRow>
                        }
                        else
                        {
                            <TableRow>
                                <TableRowHeader>
                                    <Text Alignment="TextAlignment.Center">@iteration.Number</Text>
                                </TableRowHeader>
                                <TableRowCell>
                                    <Text Alignment="TextAlignment.Center">@iteration.TotalCapacity</Text>
                                </TableRowCell>
                                <TableRowCell>
                                    <Text Alignment="TextAlignment.Center">@iteration.TechDebtImpactOnCapacity</Text>
                                </TableRowCell>
                                <TableRowCell>
                                    <Text Alignment="TextAlignment.Center">@iteration.AvailableCapacity</Text>
                                </TableRowCell>
                                <TableRowCell>
                                    <Text Alignment="TextAlignment.Center">@iteration.FeaturePointsComplete</Text>
                                </TableRowCell>
                            </TableRow>
                        }
                    }
                </TableBody>
            </Table>
        </Column>
    </Row>

    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Primary">
                Proposed IterationModel @_gameManager.CurrentIteration.Number
            </Heading>

            <GameCardListContainer GameManager="@_gameManager" OnStatusUpdated="CardsMoved">
                <Row>
                    <Column ColumnSize="ColumnSize.Is4">
                        <GameCardList GameCardListType="GameCardListType.OutstandingTechDebt">
                            <Heading Size="HeadingSize.Is5" TextColor="TextColor.Danger">Outstanding Tech Debt</Heading>
                        </GameCardList>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <GameCardList GameCardListType="GameCardListType.ProposedForIteration">
                            <Heading Size="HeadingSize.Is5" TextColor="TextColor.Success">Things to tackle this iteration</Heading>
                        </GameCardList>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <GameCardList GameCardListType="GameCardListType.ProposedForIteration">
                            <Heading Size="HeadingSize.Is5" TextColor="TextColor.Success">Things to tackle this iteration</Heading>
                        </GameCardList>
                    </Column>
                </Row>
            </GameCardListContainer>
        </Column>
    </Row>
</Container>

@code {
    private Modal _endOfIterationModal;

    private readonly GameManager _gameManager = new GameManager();
    
    private void ShowModal()
    {
        _endOfIterationModal.Show();
    }

    private void HideModal()
    {
        _endOfIterationModal.Hide();
    }

    public void EndIteration()
    {
        _gameManager.StartNewIteration();
        ShowModal();
    }

    private void CardsMoved()
    {
        //This forces a repaint
    }

}